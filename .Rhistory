se_cstat <- se_cstatsq^0.5
CIwidth <- 2*1.96*se_cstat
df <- data.frame(size = size,se_cstatsq=se_cstatsq,se_cstat=se_cstat,CIwidth=CIwidth)
df2 <- df[df$CIwidth<=cstatciwidth,]
View(df2)
df2$size[1]
lpnormal <- cbind(90,5)
simobs <-10000
x <- rnorm(simobs, mean=lpnormal[,1], sd=lpnormal[,2])
hist(x, breaks=50)
View(lpnormal)
is.vector(lpnormal)
lpnormal <- rbind(90,5)
simobs <-10000
is.vector(lpnormal)
x <- rnorm(simobs, mean=lpnormal[1,], sd=lpnormal[2,])
hist(x, breaks=50)
lpnormal <- c(90,5)
lpnormal
is.vector(lpnormal)
lpnormal <- r(90,5)
lpnormal <- c(90,5)
simobs <-10000
is.vector(lpnormal)
x <- rnorm(simobs, mean=lpnormal[1,], sd=lpnormal[2,])
lpnormal
lpnormal <- c(90,5)
simobs <-10000
is.vector(lpnormal)
x <- rnorm(simobs, mean=lpnormal[,1], sd=lpnormal[,2])
lpnormal <- c(90,5)
simobs <-10000
is.vector(lpnormal)
x <- rnorm(simobs, mean=lpnormal[1], sd=lpnormal[2])
hist(x, breaks=50)
lpnormal <- c(90,5)
simobs <-10000
is.vector(lpnormal)
graph <- "FALSE"
if (lpnormal!=NA) {
lpdist <- "normal"
print("Normal LP distribution with parameters - mean=lpnormal[1], sd=lpnormal[2]")
LP <- rnorm(simobs, mean=lpnormal[1], sd=lpnormal[2])
}
lpnormal <- c(90,5)
simobs <-10000
is.vector(lpnormal)
graph <- "FALSE"
if (!is.na(lpnormal)) {
lpdist <- "normal"
print("Normal LP distribution with parameters - mean=lpnormal[1], sd=lpnormal[2]")
LP <- rnorm(simobs, mean=lpnormal[1], sd=lpnormal[2])
}
!is.na(lpnormal)
is.na(lpnormal)
if (is.na(lpnormal)) {
lpdist <- "normal"
print("Normal LP distribution with parameters - mean=lpnormal[1], sd=lpnormal[2]")
LP <- rnorm(simobs, mean=lpnormal[1], sd=lpnormal[2])
}
is.na(lpnormal)=c(F,F)
lpnormal <- c(90,5)
simobs <-10000
is.vector(lpnormal)
graph <- "FALSE"
if (is.na(lpnormal)=c(F,F)) {
is.na(lpnormal)==c(F,F)
lpnormal <- c(90,5)
simobs <-10000
is.vector(lpnormal)
graph <- "FALSE"
if (is.na(lpnormal)==c(F,F)) {
lpdist <- "normal"
print("Normal LP distribution with parameters - mean=lpnormal[1], sd=lpnormal[2]")
LP <- rnorm(simobs, mean=lpnormal[1], sd=lpnormal[2])
}
lpnormal <- NA #c(90,5)
simobs <-10000
is.vector(lpnormal)
graph <- "FALSE"
if (is.na(lpnormal)) {
lpdist <- "normal"
print("Normal LP distribution with parameters - mean=lpnormal[1], sd=lpnormal[2]")
LP <- rnorm(simobs, mean=lpnormal[1], sd=lpnormal[2])
}
is.na(lpnormal)
lpnormal <- NA #c(90,5)
simobs <-10000
is.vector(lpnormal)
graph <- "FALSE"
if (!is.na(lpnormal)) {
lpdist <- "normal"
print("Normal LP distribution with parameters - mean=lpnormal[1], sd=lpnormal[2]")
LP <- rnorm(simobs, mean=lpnormal[1], sd=lpnormal[2])
}
lpnormal <- c(90,5)
simobs <-10000
is.vector(lpnormal)
graph <- "FALSE"
if (!is.na(lpnormal)) {
lpdist <- "normal"
print("Normal LP distribution with parameters - mean=lpnormal[1], sd=lpnormal[2]")
LP <- rnorm(simobs, mean=lpnormal[1], sd=lpnormal[2])
}
if (!is.na(lpnormal[1])) {
lpdist <- "normal"
print("Normal LP distribution with parameters - mean=lpnormal[1], sd=lpnormal[2]")
LP <- rnorm(simobs, mean=lpnormal[1], sd=lpnormal[2])
}
lpnormal <- c(90,5)
simobs <-10000
is.vector(lpnormal)
graph <- "FALSE"
if (!is.na(lpnormal[1])) {
lpdist <- "normal"
print("Normal LP distribution with parameters - mean="lpnormal[1]", sd="lpnormal[2])
?print()
?cat()
lpnormal <- c(90,5)
simobs <-10000
is.vector(lpnormal)
graph <- "FALSE"
if (!is.na(lpnormal[1])) {
lpdist <- "normal"
cat("Normal LP distribution with parameters - mean=",lpnormal[1],", sd=",lpnormal[2])
LP <- rnorm(simobs, mean=lpnormal[1], sd=lpnormal[2])
}
if (graph=TRUE) {
if (graph==TRUE) {
hist(LP, breaks=50)
}
lpnormal <- c(90,5)
simobs <-10000
is.vector(lpnormal)
graph <- "TRUE"
if (!is.na(lpnormal[1])) {
lpdist <- "normal"
cat("Normal LP distribution with parameters - mean=",lpnormal[1],", sd=",lpnormal[2])
LP <- rnorm(simobs, mean=lpnormal[1], sd=lpnormal[2])
}
if (graph==TRUE) {
hist(LP, breaks=50)
}
lpnormal <- c(90,5)
simobs <-10000
is.vector(lpnormal)
graph <- "TRUE"
if (!is.na(lpnormal[1])) {
lpdist <- "normal"
cat("Normal LP distribution with parameters - mean=",lpnormal[1],", sd=",lpnormal[2],"\n")
LP <- rnorm(simobs, mean=lpnormal[1], sd=lpnormal[2])
}
if (graph==TRUE) {
hist(LP, breaks=50)
}
lpnormal <- NA #c(90,5)
simobs <-10000
is.vector(lpnormal)
graph <- "TRUE"
if (!is.na(lpnormal[1])) {
lpdist <- "normal"
cat("Normal LP distribution with parameters - mean=",lpnormal[1],", sd=",lpnormal[2],"\n")
LP <- rnorm(simobs, mean=lpnormal[1], sd=lpnormal[2])
}
if (graph==TRUE) {
hist(LP, breaks=50)
}
beta0 <- 0
beta1 <- 1
# caclulate elements of I matrix
Borenstein_00 <- exp(beta0 + (beta1*LP))/((1+ exp(beta0 + (beta1*LP)))^2)
Borenstein_01 <- LP*exp(beta0 + (beta1*LP))/((1+ exp(beta0 + (beta1*LP)))^2)
Borenstein_11 <- LP*LP*exp(beta0 + (beta1*LP))/((1+ exp(beta0 + (beta1*LP)))^2)
Borenstein_00
I_00 <- mean(Borenstein_00)
I_01 <- mean(Borenstein_01)
I_11 <- mean(Borenstein_11)
# calculate SE from input target CI width
se_cslope <- round(csciwidth/(2*1.96),.00001) // SS very sensitive to rounding
se_cslope <- round(csciwidth/(2*1.96),.00001)
se_cslope <- csciwidth/(2*1.96)
csciwidth <- 0.1
lpnormal <- c(90,5)
simobs <-10000
is.vector(lpnormal)
graph <- "TRUE"
if (!is.na(lpnormal[1])) {
lpdist <- "normal"
cat("Normal LP distribution with parameters - mean=",lpnormal[1],", sd=",lpnormal[2],"\n")
LP <- rnorm(simobs, mean=lpnormal[1], sd=lpnormal[2])
}
if (graph==TRUE) {
hist(LP, breaks=50)
}
# input assumed parameters of calibration model (in future vr these could be options)
beta0 <- 0
beta1 <- 1
# caclulate elements of I matrix
Borenstein_00 <- exp(beta0 + (beta1*LP))/((1+ exp(beta0 + (beta1*LP)))^2)
Borenstein_01 <- LP*exp(beta0 + (beta1*LP))/((1+ exp(beta0 + (beta1*LP)))^2)
Borenstein_11 <- LP*LP*exp(beta0 + (beta1*LP))/((1+ exp(beta0 + (beta1*LP)))^2)
I_00 <- mean(Borenstein_00)
I_01 <- mean(Borenstein_01)
I_11 <- mean(Borenstein_11)
# calculate SE from input target CI width
se_cslope <- csciwidth/(2*1.96)
# calculate sample size
n2 <- ceil(I_00/(se_cslope*se_cslope*((I_00*I_11)-(I_01*I_01))))
n2 <- ceiling(I_00/(se_cslope*se_cslope*((I_00*I_11)-(I_01*I_01))))
E2 <- n2*prevalence
n2
se_cslope
I_11
I_01
I_00
suppressMessages(suppressWarnings(sapply(c("dplyr","IRdisplay","xtable","haven","readr","readxl","table1","foreign","sjPlot","sjlabelled", "stringr"), require , character.only = TRUE,quietly=T)))
ds = sjlabelled::read_stata("C:\\Users\\ensorjz\\OneDrive - University of Birmingham\\i-WIP GDM IPD MA\\Statisical Analysis\\CleanedMeta.dta")
install.packages("haven")
suppressMessages(suppressWarnings(sapply(c("dplyr","IRdisplay","xtable","haven","readr","readxl","table1","foreign","sjPlot","sjlabelled", "stringr"), require , character.only = TRUE,quietly=T)))
ds = sjlabelled::read_stata("C:\\Users\\ensorjz\\OneDrive - University of Birmingham\\i-WIP GDM IPD MA\\Statisical Analysis\\CleanedMeta.dta")
p1<- list()
for (val in c("Kunath 2019" )) {
cluster_data <- ds[(ds$Name_Protocol==val) , ]
print (summary(as.factor(cluster_data$Name_Protocol)))
m <- glmer(gdm_nice ~ (1|study_UoR) + allocation + age + b_bmi, data = cluster_data, family=binomial, control = glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun=2e5)))
print(summary(m))
p<-setDT(as.data.frame(coefficients(summary(m))), keep.rownames= TRUE)[]
p$studyName<-val
p1[[val]]<-as.data.frame(p)
}
install.packages("glmer")
library(lme4)
p1<- list()
for (val in c("Kunath 2019" )) {
cluster_data <- ds[(ds$Name_Protocol==val) , ]
print (summary(as.factor(cluster_data$Name_Protocol)))
m <- glmer(gdm_nice ~ (1|study_UoR) + allocation + age + b_bmi, data = cluster_data, family=binomial, control = glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun=2e5)))
print(summary(m))
p<-setDT(as.data.frame(coefficients(summary(m))), keep.rownames= TRUE)[]
p$studyName<-val
p1[[val]]<-as.data.frame(p)
}
View(ds)
View(cluster_data)
cluster_data <- ds[(ds$Name_Protocol=="Kunath 2019") , ]
cluster_data <- ds[(ds$Name_Protocol=="Luoto 2011") , ]
View(cluster_data)
View(ds)
cluster_data <- ds[(ds$Name_Protocol=="Kunath 2019") , ]
#Analyses on individual-level data: mixed-effects model, individual age, b_bmi, treatmenr as fixed effects and random intercepts for clusters
library("lme4")
m <- glmer(gdm_nice ~ (1|study_UoR) + allocation + age + b_bmi, data = cluster_data, family=binomial, control = glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun=2e5)))
View(cluster_data)
View(ds)
p1<- list()
for (val in c("Kunath 2019" )) {
cluster_data <- ds[(ds$study_name==val) , ]
print (summary(as.factor(cluster_data$study_name)))
m <- glmer(gdm_nice ~ (1|study_UoR) + allocation + age + b_bmi, data = cluster_data, family=binomial, control = glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun=2e5)))
print(summary(m))
p<-setDT(as.data.frame(coefficients(summary(m))), keep.rownames= TRUE)[]
p$studyName<-val
p1[[val]]<-as.data.frame(p)
}
View(cluster_data)
exp(c(-6.32893445,-0.07655421,0.05124905,0.11335069))
p<- as.data.frame(coefficients(summary(m)))
library("data.table")
p<-setDT(as.data.frame(coefficients(summary(m))), keep.rownames= TRUE)[]
p$studyName<-'asd'
View(p)
install.packages("predtools")
m2<-0.8
simobs<-1000000
outcome <- rbinom(n=simobs, size=1, prob=prevalence)
m2<-0.8
simobs<-100000
prevalence <- 0.018
outcome <- rbinom(n=simobs, size=1, prob=prevalence)
LP <- rnorm(n=simobs, mean=m2, sd=sqrt(var))
m2<-0.8
var<- 0.2
simobs<-100000
prevalence <- 0.018
outcome <- rbinom(n=simobs, size=1, prob=prevalence)
LP <- rnorm(n=simobs, mean=m2, sd=sqrt(var))
LP[outcome] <- rnorm(n=simobs, mean=m2+var, sd=sqrt(var))[outcome]
LP
m2<-0.8
var<- 0.2
simobs<-100000
prevalence <- 0.018
outcome <- rbinom(n=simobs, size=1, prob=prevalence)
LP <- rnorm(n=simobs, mean=m2, sd=sqrt(var))
LP[outcome] <- rnorm(n=simobs, mean=99, sd=sqrt(var))[outcome]
LP
outcome <- rbinom(n=simobs, size=1, prob=prevalence)
LP <- rnorm(n=simobs, mean=m2, sd=sqrt(var))
LP[outcome] <- 99
LP
outcome
m2<-0.8
var<- 0.2
simobs<-100000
prevalence <- 0.2
outcome <- rbinom(n=simobs, size=1, prob=prevalence)
LP <- rnorm(n=simobs, mean=m2, sd=sqrt(var))
LP[outcome] <- 99 #rnorm(n=simobs, mean=m2+var, sd=sqrt(var))[outcome]
LP
m2<-0.8
var<- 0.2
simobs<-100000
prevalence <- 0.2
outcome <- rbinom(n=simobs, size=0, prob=prevalence)
LP <- rnorm(n=simobs, mean=m2, sd=sqrt(var))
LP[outcome] <- 99 #rnorm(n=simobs, mean=m2+var, sd=sqrt(var))[outcome]
LP
outcome
m2<-0.8
var<- 0.2
simobs<-100000
prevalence <- 0.2
outcome <- rbinom(n=simobs, size=1, prob=prevalence)
LP <- rnorm(n=simobs, mean=m2, sd=sqrt(var))
LP[outcome] <- 99 #rnorm(n=simobs, mean=m2+var, sd=sqrt(var))[outcome]
LP
outcome
mean(outcome)
m2<-0.8
var<- 0.2
simobs<-100000
prevalence <- 0.2
outcome <- rbinom(n=simobs, size=1, prob=prevalence)
LP <- rnorm(n=simobs, mean=m2, sd=sqrt(var))
LP[outcome] <- rnorm(n=simobs, mean=1000, sd=sqrt(var))[outcome]
LP
m2<-0.8
var<- 0.2
simobs<-100000
prevalence <- 0.2
outcome <- rbinom(n=simobs, size=1, prob=prevalence)
LP <- rnorm(n=simobs, mean=m2, sd=sqrt(var))
LP[outcome] <- rnorm(n=simobs, mean=100, sd=sqrt(var))[outcome]
LP
m2<-0.8
cstatistic<-0.8
var<- 2*(qnorm(cstatistic)^2)
simobs<-1000000
prevalence <- 0.2
outcome <- rbinom(n=simobs, size=1, prob=prevalence)
LP <- rnorm(n=simobs, mean=m2, sd=sqrt(var))
Events <- rnorm(n=simobs, mean=m2+var, sd=sqrt(var))
LP <- replace(LP, outcome, Events)
library("devtools")
library("pkgbuild")
library("roxygen2")
library("testthat")
library("digest")
library("rms")
file <- "C:\\Users\\ensorjz\\OneDrive - University of Birmingham\\pm suite r vr\\pmvalsampsize"
setwd(file)
devtools::load_all()
devtools::document()
library(pmvalsampsize)
?pmvalsampsize
pkgload::dev_help('pmvalsampsize')
pmvalsampsize(type = "b", prevalence = 0.018, cstatistic = 0.8, lpnormal = c(-5,2.5), oeciwidth = 1, simobs = 1000)
pmvalsampsize(type = "b", prevalence = 0.018, cstatistic = 0.8, lpnormal = c(-5,2.5), oeciwidth = 1, threshold = 0.08, simobs = 1000)
pmvalsampsize(type = "b", prevalence = 0.018, cstatistic = 0.8, lpbeta = c(0.5,0.5), oeciwidth = 1, graph = TRUE)
pmvalsampsize(type = "b", prevalence = 0.018, cstatistic = 0.8, lpcstat = -4, oeciwidth = 1, seed = 1234, graph = TRUE)
devtools::test()
pmvalsampsize(type = "b", prevalence = 0.018, cstatistic = 0.8, lpnormal = c(-5,2.5), oeciwidth = 1)
pmvalsampsize(type = "b", prevalence = 0.018, cstatistic = 0.8, lpnormal = c(-5,2.5), oeciwidth = 1, simobs = 1000)
pmvalsampsize(type = "b", prevalence = 0.018, cstatistic = 0.8, lpbeta = c(0.5,0.5), oeciwidth = 1, simobs = 1000)
pmvalsampsize(type = "b", prevalence = 0.018, cstatistic = 0.8, lpcstat = -4, oeciwidth = 1, seed = 1234, simobs = 1000)
pmvalsampsize(type = "b", prevalence = 0.018, cstatistic = 0.8, lpcstat = -4.7, oeciwidth = 1, seed = 1234, simobs = 1000)
pmvalsampsize(type = "b", prevalence = 0.018, cstatistic = 0.8, lpcstat = -4.7, oeciwidth = 1, seed = 1234, simobs = 1000)
pmvalsampsize(type = "b", prevalence = 0.018, cstatistic = 0.8, lpcstat = -4.7, oeciwidth = 1, seed = 12345, simobs = 1000)
pmvalsampsize(type = "b", prevalence = 0.018, cstatistic = 0.8, lpcstat = -4.7, oeciwidth = 1, seed = 1234, simobs = 10000)
file <- "C:\\Users\\ensorjz\\OneDrive - University of Birmingham\\pm suite r vr\\pmvalsampsize"
setwd(file)
devtools::load_all()
devtools::document()
library(pmvalsampsize)
pkgload::dev_help('pmvalsampsize')
p1 <- pmvalsampsize(type = "b", prevalence = 0.018, cstatistic = 0.8, lpnormal = c(-5,2.5), oeciwidth = 1, simobs = 1000)
p1
p2 <- pmvalsampsize(type = "b", prevalence = 0.018, cstatistic = 0.8, lpnormal = c(-5,2.5), oeciwidth = 1, threshold = 0.08, simobs = 1000)
p2
pmvalsampsize(type = "b", prevalence = 0.018, cstatistic = 0.8, lpbeta = c(0.5,0.5), oeciwidth = 1, graph = TRUE)
pmvalsampsize(type = "b", prevalence = 0.018, cstatistic = 0.8, lpcstat = -4, oeciwidth = 1, seed = 1234, graph = TRUE)
devtools::test()
devtools::spell_check()
devtools::check()
use_cran_comments()
use_cran_comments()
devtools::check_rhub()
file <- "C:\\Users\\ensorjz\\OneDrive - University of Birmingham\\pm suite r vr\\pmvalsampsize"
setwd(file)
devtools::load_all()
devtools::document()
library(pmvalsampsize)
?pmvalsampsize
pkgload::dev_help('pmvalsampsize')
devtools::test()
devtools::check()
devtools::spell_check()
use_cran_comments()
devtools::check_rhub()
check_win_devel()
devtools::release()
git remote add origin https://github.com/JoieEnsor/pmvalsampsize.git
git config --global user.email "joie.ensor@gmail.com"
install.packages("pkgdown")
library(pkgdown)
usethis::use_pkgdown()
install.packages("usethis")
usethis::use_pkgdown()
usethis::use_git()
?usethis::use_github()
gh_token_help()
usethis::gh_token_help()
usethis::create_github_token()
gitcreds::gitcreds_set(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)
usethis::gitcreds::gitcreds_set(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)
gitcreds::gitcreds_set("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")
gitcreds::gitcreds_set(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)
gitcreds::gitcreds_set()
usethis::use_git()
usethis::use_github()
usethis::use_git_remote("origin", url = NULL, overwrite = TRUE)
usethis::use_github()
gh_token_help()
usethis::gh_token_help()
gitcreds::gitcreds_set()
usethis::use_github()
pkgdown::build_site()
pkgdown::build_site()
usethis::use_pkgdown()
pkgdown::build_site()
usethis::use_git()
?usethis::use_github()
edit_r_environ()
library(usethis)
edit_r_environ()
usethis::use_github(protocol = 'https', auth_token = Sys.getenv("GITHUB_PAT"))
install.packages("gh")
# Load the package
library("gh")
vignette(package = "gh")
usethis::gh_token_help()
edit_r_environ()
edit_r_environ()
usethis::edit_r_environ()
usethis::gh_token_help()
usethis::git_sitrep()
use_git_config(user.name = "JoieEnsor")
usethis::use_git_config(user.name = "JoieEnsor")
usethis::git_sitrep()
?git_vaccinate
git_vaccinate
usethis::git_vaccinate
usethis::gh_token_help()
gitcreds::gitcreds_get()
?gitcreds::gitcreds_set()
gitcreds::gitcreds_set()
gitcreds::gitcreds_get()
gitcreds::gitcreds_get()
usethis::git_sitrep()
usethis::use_git()
usethis::use_github()
library(usethis)
use_git_config(user.name = "JoieEnsor", user.email = "joie.ensor@gmail.com")
usethis::git_default_branch_configure()
usethis::create_github_token()
gitcreds::gitcreds_set()
?usethis.destdir
usethis::usethis.destdir
usethis.destdir
usethis::.Rprofile
.Rprofile
usethis::edit_r_profile()
usethis::edit_r_profile()
usethis::create_from_github(
"https://github.com/JoieEnsor/myrepo.git",
)
gitcreds::gitcreds_get()
gitcreds::gitcreds_set()
usethis::create_from_github(
"https://github.com/JoieEnsor/myrepo.git",
)
usethis::create_from_github(
"https://github.com/JoieEnsor/myrepo.git",
fork = FALSE
)
usethis::create_from_github(
"https://github.com/JoieEnsor/myrepo.git",
fork = FALSE
)
??usethis.destdir
.libPaths()
usethis::create_from_github(
"https://github.com/JoieEnsor/pmvalsampsize.git",
fork = FALSE
# destdir = "~/path/to/where/you/want/the/local/repo/"
)
library(usethis)
usethis::create_from_github(
"https://github.com/JoieEnsor/pmvalsampsize.git",
fork = FALSE
# destdir = "D:/Work post Keele/"
)
